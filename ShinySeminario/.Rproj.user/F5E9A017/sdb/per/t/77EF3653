{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Implementación de un sistema de indicadores en una ShinyApp\"\nauthor: \"Edson Rolando Tamayo Castañeda\"\ndate: \"24 de marzo de 2017\"\noutput: ioslides_presentation\ncss: style.css\nruntime: shiny\n---\n\n## Introducción\n\n\n<p style=\"text-align: justify;\"> En la actualidad el uso HTML, JavaScript y CSS para generar reportes interactivos, acompañados datos tabulados, gráficas y notas explicativas dinámicas, para la publicación de resultados estadísticos se ha convertido en una herramienta atractiva. Teniendo entre otras ventajas, sobre los reportes escritos pdf, el mantenerse actualizados ya que si se modifica la base de datos también se modifica el reporte.</p>\n\n<img src=\"HTML5_CSS_JavaScript.png\" style=\"width: 400px;\"/>\n\n## Introducción\n\n<h3>Inconvenientes:</h3>\n\n- <p style=\"text-align: justify;\">Es necesario tener conocimiento sobre los lenguajes de programación HTML, JavaScript y CSS.</p>\n- <p style=\"text-align: justify;\">JavaScript el lenguaje de programación web no está especializado en el análisis estadístico por lo que dificulta la generación de los reportes.</p>\n\n### Solución:\n\n- Combinar HTML, JavaScript y CSS con R=Shiny.\n\n<img src=\"HTML5_CSS_JavaScript_R.png\" style=\"width: 400px;\"/>\n\n## Shiny\n\n<p style=\"text-align: justify;\"> Shiny es un paquete de R que permite crear aplicaciones web, sin necesidad de conocer los lenguajes de programación World Wide Web</p>\n\n<p style=\"text-align: justify;\"> Permite un análisis flexible e interactivo de los resultados, con esto se quiere decir que el usuario no sólo puede ver los reportes (gráficas, tablas, mapas, etc), más aún el usuario puede modificaros, introduciendo nuevos datos, texto, seleccionando rangos, entre otros input o entradas, que por medio de widgets Shiny permite al usuario comunicarse con el servidor.</p>\n\n\n## Creación de una ShinyApp Basica.\n\n### Instalación\n\n- R 3.3.3 [descargar](https://cran.r-project.org)\n- Rstudio [descargar](https://www.rstudio.com/products/rstudio/download)\n- Instalar Shiny\n\n```{r insShiny}\n#install.packages(\"shiny\")\nlibrary(shiny)\n\n#Partes basicas de una ShinyApp\nui<-shinyUI(fluidPage())\nserver<-shinyServer(function(input,output){})\n```\n\n\n## La interfaz de usuario (UI)\n\n<p style=\"text-align: justify;\"> Controla apariencia de la app. Por lo general se guarda en un script llamado ui.R, a continuación el ui del ejemplo Hola shiny</p>\n\n```{r UI}\nui<-shinyUI(fluidPage(\n\n  titlePanel(\"Hola Shiny!\"),\n\n  # Crear una página con una barra lateral\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"barras\", \"Numero de barras:\", min = 1,\n                  max = 50,\n                  value = 30)),\n\n    # Mostrar la gráfica de la distribución generada\n    mainPanel(plotOutput(\"distPlot\") ))\n  ))\n```\n\n## El servidor: Server\n<p style=\"text-align: justify;\"> Contiene las instrucciones que la maquina necesita para construir la app. Especifica el código funcional detrás del ui.</p>\n```{r server}\nserver<-shinyServer(function(input, output) {\n  # Código para generar un histograma. El código esta dentro de \n  # de la función renderPlot para indicar que:\n  #\n  #  1) Es \"reactivo\", esto es se debe ejecutar automáticamente\n  #     cada vez que una entrada cambie.\n  #  2) Genera una salida de tipo plot (gráfica)\n\n  output$distPlot <- renderPlot({\n    x    <- faithful[, 2]  # Datos de Old Faithful Geyser\n    barras <- seq(min(x), max(x), length.out = input$barras + 1)\n\n    # Crea un histograma con el número de barras especificado.\n    hist(x, breaks = barras, col = 'darkgray', border = 'white')\n  })\n})\n```\n\n## Ejemplo 1: Hola Shiny\n```{r, echo=FALSE}\n  # Titulo de la aplicación\n  titlePanel(\"Hola Shiny!\")\n\n  # Crear una página con una barra lateral\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"barras\", \"Numero de barras:\", min = 1,\n                  max = 50,\n                  value = 30)),\n\n    # Mostrar la gráfica de la distribución generada\n    mainPanel(plotOutput(\"distPlot\") ))\n\noutput$distPlot <- renderPlot({\n    x    <- faithful[, 2]  # Datos de Old Faithful Geyser\n    barras <- seq(min(x), max(x), length.out = input$barras + 1)\n\n    # Crea un histograma con el número de barras especificado.\n    hist(x, breaks = barras, col = 'darkgray', border = 'white')\n  })\n```\n\n## El UI depende del server\n```{r, include=FALSE}\ntextInput(\"text\", label = \"Entrada de texto\", \n        value = \"Titulo\")\n```\n\n```{r, echo=FALSE}\n  # Titulo de la aplicación\n  titlePanel(\"Hola Shiny!\")\n\n  # Crear una pagina con una barra lateral\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"baras\", \"Numero de barras:\", min = 1,\n                  max = 50,\n                  value = 30),\n      \n      textInput(\"tex\", label =\"Entrada de texto\", \n        value = \"Enter text...\")),\n\n    # Mostrar la gráfica de la distribución generada\n    mainPanel(plotOutput(\"distPlo\") ))\n\noutput$distPlo<- renderPlot({\n    x2    <- faithful[, 2]  # Datos de Old Faithful Geyser\n    baras <- seq(min(x2), max(x2), length.out = input$baras + 1)\n\n    # Crea un histograma con el número de barras especificado.\n    hist(x2, breaks = baras, col = 'darkgray', border = 'white')\n  })\n```\n\n## El UI depende del server\n```{r, include=FALSE}\n# Crea un histograma con el número de barras especificado.\n   # hist(x, breaks = barras,main=input$text, col = 'darkgray', border = 'white')\n```\n\n\n```{r, echo=FALSE}\n  # Titulo de la aplicación\n  titlePanel(\"Hola Shiny!\")\n\n  # Crear una página con una barra lateral\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"baras2\", \"Numero de barras:\", min = 1,\n                  max = 50,\n                  value = 30),\n      \n      textInput(\"tex2\", label =\"Entrada de texto\", \n        value = \"Titulo\")),\n\n    # Mostrar la gráfica de la distribución generada\n    mainPanel(plotOutput(\"distPlo2\") ))\n\noutput$distPlo2<- renderPlot({\n    x3    <- faithful[, 2]  # Datos de Old Faithful Geyser\n    baras2 <- seq(min(x3), max(x3), length.out = input$baras2 + 1)\n\n    # Crea un histograma con el número de barras especificado.\n    hist(x3, breaks = baras2,main=input$tex2, col = 'darkgray', border = 'white')\n  })\n```\n\n## Widgets de entrada básicos.\n```{r, echo=FALSE}\n  fluidRow(\n    \n    column(3,\n      h4(\"Botones\"),\n      actionButton(\"action\", label = \"Accion\"),\n      br(),\n      submitButton(\"Enviar\")),\n    \n    column(3,\n      h4(\"Caja de seleccion\"),\n      checkboxInput(\"checkbox\", label = \"Eleccion A\", value = TRUE)),\n    \n    column(3, \n      checkboxGroupInput(\"checkGroup\", \n        label = h4(\"Caja de seleccion multiple\"), \n        choices = list(\"Eleccion 1\" = 1, \n           \"Eleccion 2\" = 2, \"Eleccion 3\" = 3),\n        selected = 1)),\n    \n    column(3, \n      dateInput(\"date\", \n        label = h4(\"Entrada de fecha\"), \n        value = \"2014-01-01\"))   \n  )\n  \n  fluidRow(\n    \n    column(3,\n      dateRangeInput(\"dates\", label = h4(\"Rango de fecha\"))),\n    \n    column(3,\n      fileInput(\"file\", label = h4(\"Carga de archivos\"))),\n    \n    \n    column(3, \n      numericInput(\"num\", \n        label = h4(\"Entrada numerica\"), \n        value = 1))   \n  )\n    \n  fluidRow(\n    \n    column(3,\n      radioButtons(\"radio\", label = h4(\"Botones de seleccion\"),\n        choices = list(\"Eleccion 1\" = 1, \"Eleccion 2\" = 2,\n                       \"Eleccion 3\" = 3),selected = 1)),\n    \n    column(3,\n      selectInput(\"select\", label = h4(\"Caja de seleccion\"), \n        choices = list(\"Eleccion 1\" = 1, \"Eleccion 2\" = 2,\n                       \"Eleccion 3\" = 3), selected = 1)),\n    \n    column(3, \n      sliderInput(\"slider1\", label = h4(\"Barras desplazadoras\"),\n        min = 0, max = 100, value = 50),\n      sliderInput(\"slider2\", \"\",\n        min = 0, max = 100, value = c(25, 75))\n      ),\n    \n    column(3, \n      textInput(\"text\", label = h4(\"Entrada de texto\"), \n        value = \"Enter text...\"))   \n  )\n\n```\n\n",
    "created" : 1490219891686.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3000955923",
    "id" : "77EF3653",
    "lastKnownWriteTime" : 1490224442,
    "last_content_update" : 1490224442957,
    "path" : "~/GitHub/PresentacionesR/ShinySeminario/shiny.Rmd",
    "project_path" : "shiny.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}